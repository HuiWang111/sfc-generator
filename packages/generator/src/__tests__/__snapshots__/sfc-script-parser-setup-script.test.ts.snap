// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sfc setup script parser should work computed crud should work 1`] = `
"const firstName = ref('Davide');
const lastName = ref('Li');
const fullName = computed(() => firstName.value + lastName.value);
const reverseName = computed(() => lastName.value + ' ' + firstName.value);"
`;

exports[`sfc setup script parser should work computed crud should work 2`] = `
"const firstName = ref('Davide');
const lastName = ref('Li');
const fullName = computed(() => firstName.value + ' ' + lastName.value);
const reverseName = computed(() => lastName.value + ' ' + firstName.value);"
`;

exports[`sfc setup script parser should work computed crud should work 3`] = `
"const firstName = ref('Davide');
const lastName = ref('Li');
const reverseName = computed(() => lastName.value + ' ' + firstName.value);"
`;

exports[`sfc setup script parser should work computed crud should work 4`] = `
{
  "async": false,
  "body": {
    "left": {
      "left": {
        "computed": false,
        "loc": undefined,
        "object": {
          "loc": undefined,
          "name": "lastName",
          "type": "Identifier",
        },
        "property": {
          "loc": undefined,
          "name": "value",
          "type": "Identifier",
        },
        "type": "MemberExpression",
      },
      "loc": undefined,
      "operator": "+",
      "right": {
        "extra": {
          "raw": "' '",
          "rawValue": " ",
        },
        "loc": undefined,
        "type": "StringLiteral",
        "value": " ",
      },
      "type": "BinaryExpression",
    },
    "loc": undefined,
    "operator": "+",
    "right": {
      "computed": false,
      "loc": undefined,
      "object": {
        "loc": undefined,
        "name": "firstName",
        "type": "Identifier",
      },
      "property": {
        "loc": undefined,
        "name": "value",
        "type": "Identifier",
      },
      "type": "MemberExpression",
    },
    "type": "BinaryExpression",
  },
  "extra": {
    "parenStart": 0,
    "parenthesized": true,
  },
  "generator": false,
  "loc": undefined,
  "params": [],
  "type": "ArrowFunctionExpression",
}
`;

exports[`sfc setup script parser should work create defineProps should work 1`] = `
"defineProps({
  checked: Boolean
});
const str = ref('');"
`;

exports[`sfc setup script parser should work methods crud should work 1`] = `
"const inputValue = ref('');
const checked = ref(false);
function handleInput(val) {
  inputValue.value = val;
}
function handleChange(val) {
  checked.value = val;
}"
`;

exports[`sfc setup script parser should work methods crud should work 2`] = `
"const inputValue = ref('');
const checked = ref(false);
function handleInput(value) {
  inputValue.value = value;
}
function handleChange(val) {
  checked.value = val;
}"
`;

exports[`sfc setup script parser should work methods crud should work 3`] = `
"const inputValue = ref('');
const checked = ref(false);
function handleChange(val) {
  checked.value = val;
}"
`;

exports[`sfc setup script parser should work methods crud should work 4`] = `
{
  "async": false,
  "body": {
    "body": [
      {
        "expression": {
          "left": {
            "computed": false,
            "loc": undefined,
            "object": {
              "loc": undefined,
              "name": "checked",
              "type": "Identifier",
            },
            "property": {
              "loc": undefined,
              "name": "value",
              "type": "Identifier",
            },
            "type": "MemberExpression",
          },
          "loc": undefined,
          "operator": "=",
          "right": {
            "loc": undefined,
            "name": "val",
            "type": "Identifier",
          },
          "type": "AssignmentExpression",
        },
        "loc": undefined,
        "type": "ExpressionStatement",
      },
    ],
    "directives": [],
    "loc": undefined,
    "type": "BlockStatement",
  },
  "generator": false,
  "id": {
    "loc": undefined,
    "name": "handleChange",
    "type": "Identifier",
  },
  "loc": undefined,
  "params": [
    {
      "loc": undefined,
      "name": "val",
      "type": "Identifier",
    },
  ],
  "type": "FunctionDeclaration",
}
`;

exports[`sfc setup script parser should work ref crud should work 1`] = `
"const checked = ref('');
const value = ref("");"
`;

exports[`sfc setup script parser should work ref crud should work 2`] = `
"const checked = ref(false);
const value = ref("");"
`;

exports[`sfc setup script parser should work ref crud should work 3`] = `"const value = ref("");"`;

exports[`sfc setup script parser should work ref crud should work 4`] = `
{
  "type": "StringLiteral",
  "value": "",
}
`;

exports[`sfc setup script parser should work update defineProps callExpression should work 1`] = `
"defineProps({
  value: {
    type: String,
    default: ''
  },
  checked: Boolean
});"
`;

exports[`sfc setup script parser should work update defineProps callExpression should work 2`] = `
"defineProps({
  value: String,
  checked: Boolean
});"
`;

exports[`sfc setup script parser should work update defineProps callExpression should work 3`] = `
"defineProps({
  checked: Boolean
});"
`;

exports[`sfc setup script parser should work update defineProps callExpression should work 4`] = `
{
  "computed": false,
  "decorators": null,
  "key": {
    "name": "checked",
    "type": "Identifier",
  },
  "shorthand": false,
  "type": "ObjectProperty",
  "value": {
    "name": "Boolean",
    "type": "Identifier",
  },
}
`;

exports[`sfc setup script parser should work update defineProps variableDeclaration should work 1`] = `
"const props = defineProps({
  value: {
    type: String,
    default: ''
  },
  checked: Boolean
});"
`;

exports[`sfc setup script parser should work update defineProps variableDeclaration should work 2`] = `
"const props = defineProps({
  value: String,
  checked: Boolean
});"
`;

exports[`sfc setup script parser should work update defineProps variableDeclaration should work 3`] = `
"const props = defineProps({
  checked: Boolean
});"
`;

exports[`sfc setup script parser should work update defineProps variableDeclaration should work 4`] = `
{
  "computed": false,
  "decorators": null,
  "key": {
    "name": "checked",
    "type": "Identifier",
  },
  "shorthand": false,
  "type": "ObjectProperty",
  "value": {
    "name": "Boolean",
    "type": "Identifier",
  },
}
`;
